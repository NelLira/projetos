		//[9-> 1 em cada 2; 8-> 1 em cada 4 ;10-> 1 em cada 5]
		repetidosJogoAnterior(Arrays.asList(8,9,10));

		// [7 -> 1 em cada 3; 8 -> 1 em cada 4; 6-> 1 em cada 5]
		// 5a9; {3=3, 4=21, 5=117, 6=339, 7=516, 8=429, 9=182,  10=41, 11=5} 
		pares(Arrays.asList(5,6,7,8,9)); 

		// [5-> 1 em cada 3; 6-> 1 em cada 4 ;4-> 1 em cada 6; 7-> 1 em cada 7]
		// 4a7 {2=5, 3=76, 4=278, 5=520, 6=451, 7=257, 8=62, 9=4} 
		primos(Arrays.asList(4,5,6,7)); 

		//[4-> 1 em cada 3; 5-> 1 em cada 4; 3-> 1 em cada 5]
		// 2a6 {1=8, 2=94, 3=351, 4=610, 5=479, 6=200, 7=19}
		sequenciaDeFibonacci(Arrays.asList(2,3,4,5,6));

		//[9-> 1 em cada 3; 10-> 1 em cada 4 ;11-> 1 em cada 6]
		// 8a11 {6=2, 7=52,8=199, 9=450, 10=483, 11=261, 12=88,13=6}
		quadrado(Arrays.asList(8,9,10,11));  

		// [5-> 1 em cada 3; 4-> 1 em cada 4; 6-> 1 em cada 5]
		// 3a7 {1=1, 2=33, 3=193, 4=430, 5=541,  6=317,7=111,8=14}
		multiplosDeTres(Arrays.asList(3,4,5,6,7)); 
		
		//1 a cada => [5-3; 6-3; 4-6; 7-7; 3-21; 8-35]
		// 3a8 {1=2, 2=12, 3=84, 4=303, 5=538, 6=549, 7=254, 8=50, 9=3} 
		numerosImportantes(Arrays.asList(3,4,5,6,7,8));
		
		QtdFiltros(Arrays.asList(1,2,3,4)); //1a4// {1=169; 2=1190; 3=366; 4=53; 5=1}
		maiorSequenciaDoisEmDois(Arrays.asList(1,2,3,4,5)); //1a5 {1=29, 2=847, 3=686, 4=205, 5=41, 6=9, 7=2}
		maiorSequenciaUmEmUm(Arrays.asList(3,4,5,6,7,8,9,10)); //3a10 {2=8, 3=231, 4=572, 5=499, 6=287, 7=123,  8=54, 9=20, 10=19, 11=3, 12=2, 13=0, 14=1 }
		
		linha(Arrays.asList(1, 2, 3, 4, 5),
			  Arrays.asList(1, 2, 3, 4, 5),  
			  Arrays.asList(1, 2, 3, 4, 5), 
			  Arrays.asList(1, 2, 3, 4, 5),
			  Arrays.asList(1, 2, 3, 4, 5));
		
		coluna(Arrays.asList(1, 2, 3, 4, 5),
			   Arrays.asList(1, 2, 3, 4, 5),
			   Arrays.asList(1, 2, 3, 4, 5),
			   Arrays.asList(1, 2, 3, 4, 5), 
			   Arrays.asList(1, 2, 3, 4, 5));
		
		/*1 a cada => [ 43332-3; 44322-4; 44331-8; 53322-11; 54321-12; 44421-25; 33333-32; 54222-35; 53331-37; 54411-121; 55221-194; 55311-277]*/
		/*43332=626 ; 44322=452; 44331=242; 53322=185; 54321=159; 44421=78; 33333=60; 54222=56; 53331=52
		54411=16; 44430=15; 54330=14; 54420=10; 55221=10; 55311=7; 55320=2 */
		linhas (Arrays.asList(
				"43332"
				,"44322"
				,"44331"
				,"53322"
				,"54321"
				,"44421"
				,"33333"
				,"54222"
				,"53331"
				,"54411"
				,"55221"
				,"55311"
				));
				
		/* 1 a cada [43332-3; 44322-4; 44331-9; 53322-11; 54321-11; 44421-16; 54222-30; 33333-30; 53331-32; 54330-99; 54411-124; 55221-153; 54420-198;
		44430-248; 55320-397; 55311-662;]*/
		/*43332=612,44322=448,44331=216, 53322=188, 54321=175, 44421=77,  54222=66, 33333=66, 53331=62, 54330=20, 54411=16, 55221=13, 54420=10, 
			44430=8, 55320=5, 55311=3, */
		colunas (Arrays.asList(
				"43332"
				,"44322"
				,"44331"
				,"53322"
				,"54321"
				,"44421"
				,"54222"
				,"33333"
				,"53331"
				,"54411"
				,"55221"
				,"55311"
				));
	
		//dezMenos();
	
		// incluir(Arrays.asList()); //
		// 1[4];2[4];3[3,4];4[4];5[4];6[4];7[4];8[4];9[4];10[3,4];11[4];12[3,4];13[4];14[3,4];15[4];16[4];17[3,4];18[4];19[3,4];20[4];21[4];22[3,4];23[4];24[4];25[4];
		// retirar(Arrays.asList()); 
		// 1 [7,8];2[7,8];3[6,7,8];4[8];5[8];6[7,8];7[6,7,8];8[7];9[7];10[8,9];11[7,8,9,10];12[7,8,9];13[8,9];14[7,8,9];15[6,7,8];16[7,8];17[6,7,8];18[7,8,9];19[7,8];20[7,8];21[7,8];22[6,7];23[7,8];24[7,8,9];25[7,8,9];
		// naoIniciarCom(Arrays.asList( ));
		// naoTerminarCom(Arrays.asList( ));
		
				/*10=4 a 8*/
		//listaMaisSaem(Arrays.asList());
		//listaMaisSaemNaoSairam(Arrays.asList());
		//listaMenosSaemNaoSairam(Arrays.asList());
		//menores();
		//soma();
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		